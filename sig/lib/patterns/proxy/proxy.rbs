module PureMVC
  # A base <code>_IProxy</code> implementation.
  #
  # In PureMVC, <code>Proxy</code> classes are used to manage parts of the application's data model.
  #
  # A <code>Proxy</code> might simply manage a reference to a local data object, in which case
  # interacting with it might involve setting and getting of its data in a synchronous fashion.
  #
  # <code>Proxy</code> classes are also used to encapsulate the application's interaction with
  # remote services to save or retrieve data. In this case, we adopt an asynchronous idiom:
  # setting data (or calling a method) on the <code>Proxy</code> and listening for a <code>Notification</code>
  # to be sent when the <code>Proxy</code> has retrieved the data from the service.
  #
  # @see Model
  class Proxy < Notifier

    include _IProxy

    # The name of the <code>Proxy</code>.
    NAME: "Proxy"

    @name: String
    # @return [String] The proxy name
    attr_reader name: String

    @data: Object?
    # @return [Object | nil] The data managed by the proxy
    attr_accessor data: Object?

    # Initializes a new Proxy instance.
    #
    # @param [String | nil] name the name of the proxy (defaults to <code>NAME</code>)
    # @param [Object, nil] data optional data to be managed by the proxy
    def initialize: (String? name, Object? data) -> void

    # Called by the Model when the Proxy is registered
    # @return [void]
    def on_register: () -> void

    # Called by the Model when the Proxy is removed
    # @return [void]
    def on_remove: () -> void
  end

  # Type-level assertion that Proxy conforms to _IProxy
  type proxy_validation = validate_proxy[Proxy]
end
