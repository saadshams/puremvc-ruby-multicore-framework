module PureMVC
  # A Multiton <code>IController</code> implementation.
  #
  # In PureMVC, the <code>Controller</code> class follows the
  # 'Command and Controller' strategy and assumes these responsibilities:
  #
  # * Remembering which <code>ICommand</code>s are intended to handle which <code>INotifications</code>.
  # * Registering itself as an <code>IObserver</code> with the <code>View</code> for each <code>INotification</code>
  #   that has an <code>ICommand</code> mapping.
  # * Creating a new instance of the proper <code>ICommand</code> to handle a given <code>INotification</code> when notified by the <code>View</code>.
  # * Calling the <code>ICommand</code>'s <code>execute</code> method, passing in the <code>INotification</code>.
  #
  # Your application must register <code>ICommands</code> with the <code>Controller</code>.
  #
  # The simplest way is to subclass <code>Facade</code>, and use its <code>initializeController</code> method
  # to add your registrations.
  #
  # @see View
  # @see Observer
  # @see Notification
  # @see SimpleCommand
  # @see MacroCommand
  class Controller

    include IController

    # The Multiton IController instanceMap.
    # @return [Hash{String => IController}]
    self.@instance_map: Hash[String, IController]

    # Mutex used to synchronize access to the instance map for thread safety.
    # @return [Mutex]
    self.@mutex: Mutex

    # The Multiton Key for this Core
    @multiton_key: String

    # Local reference to View
    @view: IView?

    # Mapping of Notification names to Command Class references
    @command_map: Hash[String, untyped]

    # Mutex used to synchronize access to the @command_map
    @command_mutex: Mutex

    # Message Constants
    MULTITON_MSG: "Controller instance for this Multiton key already constructed!"

    # The Multiton IController instanceMap.
    # @return [Hash{String => IController}]
    def self.instance_map: () -> Hash[String, IController]

    # Mutex used to synchronize access to the instance map for thread safety.
    # @return [Mutex]
    def self.mutex: () -> Mutex

    # Gets an instance using the provided factory block
    #
    # @param key [String] the unique key identifying the Multiton instance
    # @param factory [Proc<(String) -> IController>] the unique key passed to the factory block
    # @return [IController] The controller instance created by the factory
    def self.get_instance: (String key) { () -> IController } -> IController

    # Remove an IController instance
    #
    # @param key [String] the multiton key of the IController instance to remove
    # @return [void]
    def self.remove_controller: (String key) -> void

    # Constructor.
    #
    # This IController implementation is a Multiton, so you should not call the constructor
    # directly. Instead, call the static factory method, passing the unique key for this instance:
    # <code>PureMVC::Controller.getInstance(key) { |key| PureMVC::Controller.new(key) }</code>
    #
    # @raise [RuntimeError] if an instance for this Multiton key has already been constructed
    # @param key [String]
    # @return [void]
    def initialize: (String key) -> void

    # Initialize the Multiton Controller instance.
    #
    # Called automatically by the constructor.
    #
    # Note that if you are using a subclass of View
    # in your application, you should also subclass Controller
    # and override the initialize_controller method in the
    # following way:
    #
    # @example
    #   # ensure that the Controller is talking to my IView implementation
    #   def initialize_controller
    #     @view = MyView::get_instance(key) { |key| MyView.new(key) }
    #   end
    #
    # @return [void]
    def initialize_controller: () -> void

    # Register a particular ICommand class as the handler for a particular INotification.
    #
    # If an ICommand has already been registered to handle INotifications with this name,
    # it is replaced by the new ICommand.
    #
    # The Observer for the new ICommand is only created if this is the first time
    # an ICommand has been registered for this notification name.
    #
    # @param notification_name [String] the name of the INotification
    # @param factory [Proc<() -> ICommand>] the factory to produce an instance of the ICommand
    # @return [void]
    def register_command: (String notification_name) { () -> ICommand } -> void

    # If an ICommand has previously been registered to handle the given INotification, then it is executed.
    #
    # @param notification [INotification] the notification to handle
    # @return [void]
    def execute_command: (INotification notification) -> void

    # Check if a Command is registered for a given Notification.
    #
    # @param notification_name [String] the name of the Notification
    # @return [Boolean] whether a Command is currently registered for the given notification_name
    def has_command?: (String notification_name) -> bool

    # Remove a previously registered ICommand to INotification mapping.
    #
    # @param notification_name [String] the name of the INotification to remove the ICommand mapping for
    # @return [void]
    def remove_command: (String notification_name) -> void
  end
end
