module PureMVC
  # A Multiton <code>IModel</code> implementation.
  #
  # In PureMVC, the <code>Model</code> class provides access to model objects (Proxies) by named lookup.
  #
  # The <code>Model</code> assumes these responsibilities:
  #
  # - Maintains a cache of <code>IProxy</code> instances.
  # - Provides methods for registering, retrieving, and removing <code>IProxy</code> instances.
  #
  # Your application must register <code>IProxy</code> instances with the <code>Model</code>. Typically,
  # an <code>ICommand</code> is used to create and register <code>IProxy</code> instances after the <code>Facade<code>
  # has initialized the Core actors.
  #
  # @see Proxy
  # @see IProxy
  class Model

    include IModel

    # The Multiton IModel instanceMap.
    # @return [Hash{String => IModel}]
    self.@instance_map: Hash[String, IModel]

    # Mutex used to synchronize access to the instance map for thread safety.
    # @return [Mutex]
    self.@mutex: Mutex

    @multiton_key: String

    @proxy_map: Hash[String, IProxy]

    @proxy_mutex: Mutex

    # Message Constants
    MULTITON_MSG: "Model instance for this Multiton key already constructed!"

    # The Multiton IModel instanceMap.
    # @return [Hash{String => IModel}]
    def self.instance_map: () -> Hash[String, IModel]

    private

    # Mutex used to synchronize access to the instance map for thread safety.
    # @return [Mutex]
    def self.mutex: () -> Mutex

    public

    # <code>Model</code> Multiton Factory method.
    #
    # @param key [String] the unique key identifying the Multiton instance
    # @param factory [Proc<(String) -> IModel>] the unique key passed to the factory block
    # @return [IModel] the instance for this Multiton key
    def self.get_instance: (String key) { () -> IModel } -> IModel

    # Remove an IModel instance
    #
    # @param key [String] the multiton key of the IModel instance to remove
    # @return [void]
    def self.remove_model: (String key) -> void

    # Constructor.
    #
    # This <code>IModel</code> implementation is a Multiton,
    # so you should not call the constructor directly, but instead call
    # the static Multiton Factory method <code>PureMVC::Model.get_instance(key) { |key| PureMVC::Model.new(key) }</code>.
    #
    # @param key [String]
    # @return [void]
    # @raise [RuntimeError] Error if an instance for this Multiton key has already been constructed.
    def initialize: (String key) -> void

    # Initialize the <code>Model</code> instance.
    #
    # Called automatically by the constructor, this
    # is your opportunity to initialize the Multiton
    # instance in your subclass without overriding the
    # constructor.
    #
    # @return [void]
    def initialize_model: () -> void

    # Register an <code>IProxy</code> with the <code>Model</code>.
    #
    # @param proxy [IProxy] an <code>IProxy</code> to be held by the <code>Model</code>.
    # @return [void]
    def register_proxy: (IProxy proxy) -> void

    # Retrieve an <code>IProxy</code> from the <code>Model</code>.
    #
    # @param proxy_name [String] the name of the proxy to retrieve.
    # @return [IProxy, nil] the <code>IProxy</code> instance previously registered with the given <code>proxy_name</code>, or nil if none found.
    def retrieve_proxy: (String proxy_name) -> IProxy?

    # Check if a Proxy is registered.
    #
    # @param proxy_name [String] the name of the proxy to check.
    # @return [Boolean] whether a Proxy is currently registered with the given <code>proxy_name</code>.
    def has_proxy?: (String proxy_name) -> bool

    # Remove an <code>IProxy</code> from the <code>Model</code>.
    #
    # @param proxy_name [String] name of the <code>IProxy</code> instance to be removed.
    # @return [IProxy, nil] the <code>IProxy</code> that was removed from the <code>Model</code>, or nil if none found.
    def remove_proxy: (String proxy_name) -> IProxy?
  end
end
