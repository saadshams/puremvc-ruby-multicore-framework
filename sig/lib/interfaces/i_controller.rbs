module PureMVC
  # The interface definition for a PureMVC Controller.
  #
  # In PureMVC, an <code>_IController</code> implementor
  # follows the 'Command and Controller' strategy, and
  # assumes these responsibilities:
  #
  # - Remembering which <code>_ICommand</code>s
  #   are intended to handle which <code>_INotifications</code>.
  # - Registering itself as an <code>_IObserver</code> with
  #   the <code>View</code> for each <code>_INotification</code>
  #   that it has an <code>_ICommand</code> mapping for.
  # - Creating a new instance of the proper <code>_ICommand</code>
  #   to handle a given <code>_INotification</code> when notified by the <code>View</code>.
  # - Calling the <code>_ICommand</code>'s <code>execute</code>
  #   method, passing in the <code>_INotification</code>.
  #
  # @see INotification
  # @see ICommand
  interface _IController
    # Register a particular <code>_ICommand</code> class as the handler
    # for a particular <code>_INotification</code>.
    #
    # @abstract This method must be implemented by the concrete command.
    # @param notification_name [String] the name of the <code>_INotification</code>
    # @param factory [Proc<() -> _ICommand>] the class of the _ICommand
    def register_command: (String notification_name) { () -> _ICommand  } -> void

    # Execute the <code>ICommand</code> previously registered as the
    # handler for <code>INotification</code>s with the given notification name.
    #
    # @abstract This method must be implemented by the concrete command.
    # @param notification [_INotification] the <code>_INotification</code> to execute the associated <code>_ICommand</code> for
    def execute_command: (_INotification notification) -> void

    # Check if a Command is registered for a given Notification.
    #
    # @abstract This method must be implemented by the concrete command.
    # @param notification_name [String]
    # @return [Boolean] whether a Command is currently registered for the given <code>notificationName</code>.
    def has_command?: (String notification_name) -> bool

    # Remove a previously registered <code>_ICommand</code> to <code>_INotification</code> mapping.
    #
    # @abstract This method must be implemented by the concrete command.
    # @param notification_name [String] the name of the <code>_INotification</code> to remove the <code>_ICommand</code> mapping for
    def remove_command: (String notification_name) -> void
  end

  # Assert that the given `Controller` type parameter is a subtype of `_IController`
  type validate_controller[Controller < _IController] = top
end
