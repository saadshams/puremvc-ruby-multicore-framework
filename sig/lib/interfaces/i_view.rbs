module PureMVC
  # The interface definition for a PureMVC View.
  #
  # In PureMVC, <code>_IView</code> implementors assume these responsibilities:
  #
  # In PureMVC, the <code>View</code> class assumes these responsibilities:
  # - Maintain a cache of <code>_IMediator</code> instances.
  # - Provide methods for registering, retrieving, and removing <code>_IMediators</code>.
  # - Managing the observer lists for each <code>_INotification</code> in the application.
  # - Providing a method for attaching <code>_IObservers</code> to an <code>_INotification</code>'s observer list.
  # - Providing a method for broadcasting an <code>_INotification</code>.
  # - Notifying the <code>_IObservers</code> of a given <code>_INotification</code> when it is broadcast.
  interface _IView
    # Register an <code>_IObserver</code> to be notified of <code>_INotifications</code> with a given name.
    #
    # @param notification_name [String] the name of the <code>_INotifications</code> to notify this <code>_IObserver</code> of
    # @param observer [_IObserver] the <code>_IObserver</code> to register
    # @return [void]
    def register_observer: (String notification_name, _IObserver observer) -> void

    # Notify the <code>_IObservers</code> for a particular <code>_INotification</code>.
    #
    # All previously attached <code>_IObservers</code> for this <code>_INotification</code>'s
    # list are notified and are passed a reference to the <code>_INotification</code> in
    # the order in which they were registered.
    #
    # @param notification [_INotification] the <code>_INotification</code> to notify <code>_IObservers</code> of.
    # @return [void]
    def notify_observers: (_INotification notification) -> void

    # Remove a group of observers from the observer list for a given <code>Notification</code> name.
    #
    # @param notification_name [String] which observer list to remove from
    # @param notify_context [untyped] remove the observers with this object as their notifyContext
    # @return [void]
    def remove_observer: (String notification_name, untyped notify_context) -> void

    # Register an <code>_IMediator</code> instance with the <code>View</code>.
    #
    # Registers the <code>_IMediator</code> so that it can be retrieved by name,
    # and further interrogates the <code>_IMediator</code> for its
    # <code>_INotification</code> interests.
    #
    # If the <code>_IMediator</code> returns any <code>_INotification</code>
    # names to be notified about, an <code>Observer</code> is created encapsulating
    # the <code>_IMediator</code> instance's <code>handleNotification</code> method
    # and registering it as an <code>Observer</code> for all <code>_INotifications</code> the
    # <code>_IMediator</code> is interested in.
    #
    # @param mediator [_IMediator] a reference to the <code>_IMediator</code> instance
    # @return [void]
    def register_mediator: (_IMediator mediator) -> void

    # Retrieve an <code>_IMediator</code> from the <code>View</code>.
    #
    # @param mediator_name [String] the name of the <code>_IMediator</code> instance to retrieve.
    # @return [_IMediator | nil] the <code>_IMediator</code> instance previously registered with the given <code>mediatorName</code>.
    def retrieve_mediator: (String mediator_name) -> _IMediator?

    # Check if a <code>Mediator</code> is registered or not.
    #
    # @param mediator_name [String]
    # @return [Boolean] whether a <code>Mediator</code> is registered with the given <code>mediatorName</code>.
    def has_mediator?: (String mediator_name) -> bool

    # Remove an <code>_IMediator</code> from the <code>View</code>.
    #
    # @param mediator_name [String] name of the <code>_IMediator</code> instance to be removed.
    # @return [_IMediator] the <code>_IMediator</code> that was removed from the <code>View</code>
    def remove_mediator: (String mediator_name) -> _IMediator?
  end

  # Assert that the given `View` type parameter is a subtype of `_IView`
  type validate_view[View < _IView] = top
end
