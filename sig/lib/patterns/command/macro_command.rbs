module PureMVC
  # A base _ICommand implementation that executes other ICommand instances.
  #
  # A MacroCommand maintains a list of _ICommand class references called SubCommands.
  #
  # When <code>execute</code>is called, the MacroCommand instantiates and calls <code>execute</code>on each of its SubCommands in turn.
  # Each SubCommand will be passed a reference to the original INotification that was passed to the MacroCommand's <code>execute</code>method.
  #
  # Unlike SimpleCommand, your subclass should not override <code>execute</code> but instead override <code>initialize_macro_command</code>
  # calling <code>add_sub_command</code>once for each SubCommand to be executed.
  #
  # @see Controller
  # @see Notification
  # @see SimpleCommand
  class MacroCommand # < Notifier

    include _ICommand

    @sub_commands: Array[^() -> _ICommand]

    # Constructor.
    #
    # You should not need to define a constructor,
    # instead, override the <code>initialize_macro_command</code> method.
    #
    # If your subclass does define a constructor,
    # be sure to call <code>super</code>
    # @return [void]
    def initialize: () -> void

    # Initialize the MacroCommand.
    #
    # In your subclass, override this method to
    # initialize the MacroCommand's SubCommand list with
    # ICommand factory references, like this:
    #
    # @example
    #   def initialize_macro_command
    #     add_sub_command  { FirstCommand.new }
    #     add_sub_command  { SecondCommand.new }
    #     add_sub_command  { ThirdCommand.new }
    #   end
    #
    # Note that SubCommands may be any _ICommand implementor;
    # MacroCommands or SimpleCommands are both acceptable.
    # @return [void]
    def initialize_macro_command: () -> void

    # Add a SubCommand.
    # SubCommands will be called in First In/First Out (FIFO) order.
    #
    # @param factory [Proc<() -> _ICommand>] A block or callable that returns an instance of _ICommand when called.
    # @return [void]
    def add_sub_command: () { () -> _ICommand } -> void
  end

  # Type-level assertion that MacroCommand conforms to _ICommand
  type macro_command_validation = validate_command[MacroCommand]
end
