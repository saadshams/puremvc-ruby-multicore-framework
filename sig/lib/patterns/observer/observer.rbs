module PureMVC
  # A base <code>_IObserver</code> implementation.
  #
  # An <code>Observer</code> is an object that encapsulates information
  # about an interested object with a method that should
  # be called when a particular <code>_INotification</code> is broadcast.
  #
  # In PureMVC, the <code>Observer</code> class assumes these responsibilities:
  # - Encapsulate the notification (callback) method of the interested object.
  # - Encapsulate the notification context (<code>self</code>) of the interested object.
  # - Provide methods for setting the notification method and context.
  # - Provide a method for notifying the interested object.
  #
  # @see View
  # @see Notification
  class Observer

    include _IObserver

    @notify: Method?

    @context: Object?

    # @return [Method | nil] notify The callback method to be called on notification.
    attr_accessor notify: Method?

    # @return [Object | nil] context The object context for the callback.
    attr_accessor context: Object?

    # Initialize an Observer with a notify method and context.
    #
    # @param notify [Method, nil] the callback method to invoke on notification.
    # @param context [Object, nil] the object context for the callback.
    # @return [void]
    def initialize: (Method? notify, Object? context) -> void
    #def initialize: ((^(_INotification) -> void)?, Object?) -> void

    # Calls the notify method with the given notification.
    #
    # @param notification [_INotification] the notification to send.
    # @return [void]
    def notify_observer: (_INotification) -> void

    # Compares the given object with the Observer's context.
    #
    # @param object [Object] the object to compare.
    # @return [Boolean] true if the given object is the same as the context.
    def compare_notify_context?: (Object) -> bool
  end
end
