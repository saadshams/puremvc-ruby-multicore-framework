module PureMVC
  # The interface definition for a PureMVC Observer.
  #
  # In PureMVC, <code>_IObserver</code> implementors assume these responsibilities:
  # - Encapsulate the notification (callback) method of the interested object.
  # - Encapsulate the notification context (this) of the interested object.
  # - Provide methods for setting the interested object's notification method and context.
  # - Provide a method for notifying the interested object.
  #
  # PureMVC does not rely upon underlying event
  # models such as the one provided with Flash,
  # and ActionScript 3 does not have an inherent
  # event model.
  #
  # The Observer Pattern as implemented within
  # PureMVC exists to support event-driven communication
  # between the application and the actors of the
  # MVC triad.
  #
  # An Observer is an object that encapsulates information
  # about an interested object with a notification method that
  # should be called when an <code>_INotification</code> is broadcast. The Observer then
  # acts as a proxy for notifying the interested object.
  #
  # Observers can receive <code>Notification</code>s by having their
  # <code>notifyObserver</code> method invoked, passing
  # in an object implementing the <code>_INotification</code> interface, such
  # as a subclass of <code>Notification</code>.
  #
  # @see IView
  # @see INotification
  interface _IObserver
    # Notify the interested object.
    #
    # @param notification [INotification] the <code>_INotification</code> to pass to the interested object's notification method
    # @return [void]
    def notify_observer: (_INotification notification) -> void

    # Compare the given object to the notification context object.
    #
    # @param object [Object] the object to compare.
    # @return [Boolean] indicating if the notification context and the object are the same.
    def compare_notify_context?: (Object object) -> bool
  end

  type validate_observer[Observer < _IObserver] = top
end
